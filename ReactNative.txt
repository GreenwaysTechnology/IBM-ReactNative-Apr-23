				React Native
.....................................................................................
What is React Native?

1.React Native is lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios
Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Devices:
 1.computers - desktop
 2.Hand held devices- Mobiles,Tabs..
 3.TV,Game consoles
 4.IOT devices- It could be any - watches,car,industrial apps,

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.
....................................................................................
			 How to build Mobile App
....................................................................................
Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile App built by using native platform languages- java/kotiln / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using
  container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to acess platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

...........................................................................................

How to build mobile native apps in portable way using same javascript technology without html and css?

Generally native apps are built using native platform languages like "kotlin/java"
or swift.
Building native apps using javascript language
            That is birth of React Native.

One language for both platforms.
.....................................................................................
React Native Architecture :
...........................

Application Architecture.
React Native Runtime Archtecture.


Application Architecture:
  React native apps are written using react core principles.
 -Component
 -Props
 -State
 -Event Handling
 -Context api
 -Redux
 +
 Mobile Features
  Network
  Sensors
  Contacts
  Locations
  Permission
  Auido
  Video
  etc...
How to design user interfaces?
 In browser based apps ,we use html,css
 In Mobile apps we never use html , css

Since react uses html and css to create markup using "JSX" language which is for browser.

For Mobile apps , react uses "Mobile Markup syntax" using jsx language which is for mobile apps.

React native uses Platform independent markup syntax for "user interface elements"
for eg: 

 If i use Button element/component - i dont mean the button for ios or android.

React Native Architecture :
...........................

React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

Types of React Native code:

React Native code consist of Two things:
.......................................

1.UI MARK UP Code
   -  incase of react , html is mark up

UI Mark Up code for React native:

React native does not use html language to build ui elements.
React Native provides a high level ui components already written, so we can use those
components only.Why?
 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

Compilation:

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.



2.Application logic code
   - js code - apis,state,props......


1.Source Code
    written in react - UI Code and app logic

2.Compiled code
    code converted into platform specific code.

////////////////////////////////////////////////////////////////////////////////////////////

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes  Js engine.
/////////////////////////////////////////////////////////////////////////////////////....................................................................................
				How to begin react native apps
.....................................................................................

React native apps can be built using two work flows.

1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

-Community -https://reactnative.directory/

Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
...................................................................................
Native work flow setup:
......................

Setup:
1.node.js
2.jdk 11 - openjdk -microsoft openjdk
3.set JAVA_HOME
4.Install Android Studio
5.Install Android SDK
6.Configure sdk home and path 
7.vs code

Creating a new application
..........................

npx react-native@latest init AwesomeProject
.....................................................................................

Folders and files of React Native Project:
.........................................

package.json

-react
-react-native


babel.config.js
  Transpiler configuration for converting jsx code into javascript code.

metro.js
The JavaScript bundler for React Native
It transforms code into native and js code.

tsconfig.json
  If you build react native with typescript then you can configure this file.

app.json
  Application configuration which is supplied to build system to create mobile apps.

index.js
  It is entry file for react native apps.

App.js /App.tsx(typescript syntax):
   It is entry component.

How to start React native app?

AppRegistry:

 AppRegistry is the js entry point to running all React native apps.
App Root components should register themselves with AppRegistry.registerComponent, then the native system can load the bundle for the app and then actually run the app when its ready by invoking AppRegistry.runApplication
  
AppRegistry.registerComponent(appName, () => App);


ios and android folders
  These folders are going to have platform specific code.
....................................................................................

React native concepts:

1.components
  Component is a widget(button,textbox,image)

React Native offers platform independent and platform specific built in components.

In react js , Components can be created in many ways

1.variable pattern
  
  const Header=<h1>Header</h1>

2.functional pattern
  const Header = props=><h1>Header</h1>

3.class pattern
  class Header extends React.Component {

 	render(){
	  return <h1>Header</h1>
	}
  }

In React native also we can create components in the same way.

React Native does not offer any html elements in order to start.

Basic Components:
.................
Container components:

  In React                                    In React Native

  <div><header><footer>                       <View>

Container:

<View>
 =>It is most fundamental component for building a UI.
 =>View is a container that supports layouts,mobile features such as touch,accessiblity
=>View maps directly to the native view equivalent on what ever platform React Native is running on whether it is "UIView,android.view, div"

Displaying Text:Text
....................
A Component for displaying text

<Text>Your Text</Text>

App.js
import { View, Text } from 'react-native';

const App = () => {
    return (
        <View>
            <Text>Hello,React Native</Text>
        </View>
    );
};

export default App;
.....................................................................................
			 Component Composition
...................................................................................

Folder structure of React Native apps:

React native team does not give any standard structure to organize the project,
There is mostly recommended structure

AwesomeProject:
  -components
     users
       -User.jsx
       -user.api.js
  -screens
     home
     dashboard
  -store
  -index.js
  -App.js /tsx


eg:

AwesomeProject/components/Greeter.jsx

import { View, Text } from 'react-native'
import Hello from './Hello';

const Greeter = () => {
    return <View>
        <Text>Welcome to React Native</Text>
        <Hello />
    </View>
}
export default Greeter;


AwesomeProject/components/Hello.jsx

import { View, Text } from 'react-native'

const Hello = () => {
    return <View>
        <Text>Hello React Native!</Text>
    </View>
}
export default Hello;
.....................................................................................
			  How to make your ui more interactive

Data Binding.

React data binding techniques;

In react data can be handled in two ways

1.Props pattern
2.State Pattern

Props Pattern:
 Passing data from the parent component to child component.

<Hello propName={Propvalue}/>

Hello.jsx
import { View, Text } from 'react-native'

// const Hello = props => {
//     return <View>
//         <Text>{props.text}</Text>
//     </View>
// }
// const Hello = props => {
//     const { text } = props
//     return <View>
//         <Text>{text}</Text>
//     </View>
// }
// const Hello = ({text}) => {
//     return <View>
//         <Text>{text}</Text>
//     </View>
// }
const Hello = ({ text }) => <View>
    <Text>{text}</Text>
</View>

export default Hello;

Greeter.jsx
import { View, Text } from 'react-native'
import Hello from './Hello';

const Greeter = () => {
    return <View>
        <Text>Welcome to React Native</Text>
        <Hello text="Hello React Native" />
        <Hello text="Hello Mobile" />
    </View>
}
export default Greeter;
...

Assigment:
Create User Component pass user details from the app component
 => user id,name,address: { city,state },status:boolean

Default Props
Prop Validation
class Components
What can be prop

Default Props:
 if we dont supply props, the default props can be passed.
import { View, Text } from 'react-native'

const Greeter = props => {
    return <View>
        <Text>{props.message}</Text>
    </View>
}
//default props:if props not supplied we can set default props
Greeter.defaultProps = {
    message: 'Welcome'
}
//Customer
const Customer = props => {
    return <View>
        <Text>Id : {props.customer.id}</Text>
    </View>
}
// default Props
Customer.defaultProps = {
    customer: {
        id: 0,
        name: 'Name',
        address: {
            city: 'City'
        }
    }
}

const App = () => {
    const customer = {
        id: 1,
        name: 'Subramanian',
        address: {
            city: 'Coimbatore'
        }
    }
    return <View>
        <Greeter message="Hello" />
        <Greeter />
        <Customer customer={customer} />
        <Customer />

    </View>
}
export default App;
....................................................................................
				Prop validation
....................................................................................

You know very well javascript is dynamic typed language, the type of variable is only validated during runtime not in compile time.

int a =10;
a=true

var or let  a =10
a=true
a="hello"

Steps
how to validate prop?

npm install --save prop-types

/* eslint-disable prettier/prettier */
//prop validation 

import { View, Text } from 'react-native'
import PropTypes from 'prop-types'; // ES6

const Greeter = props => {
    return <View>
        <Text>{props.message}</Text>
    </View>
}
//default props:if props not supplied we can set default props
Greeter.defaultProps = {
    message: 'Welcome'
}
//prop validation
Greeter.propTypes = {
    message: PropTypes.string
}

const App = () => {
      return <View>
        <Greeter message="Hello" />
        {/* <Greeter message={10} /> */}
        <Greeter message="welcome"/>
    </View>
}
export default App;
....................................................................................
				Class Components

import { View, Text } from 'react-native'
import PropTypes from 'prop-types'; // ES6
import React from 'react';

class Greeter extends React.Component {
    render() {
        return <View>
            <Text>{this.props.message}</Text>
        </View>
    }
}

//default props:if props not supplied we can set default props
Greeter.defaultProps = {
    message: 'Welcome'
}
//prop validation
Greeter.propTypes = {
    message: PropTypes.string
}

const App = () => {
    return <View>
        <Greeter message="Hello" />
        <Greeter/>

    </View>
}
export default App;
.....................................................................................
			Different types of Props
.....................................................................................

1.Data as prop
  any type of data can be passed as prop from parent component to child compoent.
 primitives(string,numbers,booleans)
 objects
 Arrays
2.Component as prop 
   The component can be prop to another component.
  
  Rendering component:
   <Greeter/> - self closing : the component do not have any nested/child element
   <Greeter></Greeter> :The component is enclosed it may take nested /child element
  
 <Greeter>
    <Hello/>
    <Hai>
	<Text>Your text</Text>
    </Hai>
 </Greeter>

eg:
import { View, Text } from 'react-native'

const Greeter = props => {

    return <View>
        <Text>{props.children}</Text>
    </View>
}
const Hello = props => {
    return <Text>Hello</Text>
}

const App = () => {
    return <View>
        <Greeter>
            <Hello />
        </Greeter>
    </View>
}
export default App;

3.Dynamic Prop : State as prop
.....................................................................................   			      List 

render more items on single screen:
import { View, Text } from 'react-native'

const App = () => {
    return <View>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
    </View>
}
export default App;

When you render this , you will not able to see more items on single screen.
..................................................................................
				Scroll Behaviour
....................................................................................
			Types of Views

 ->View
 ->ScrollView
 ->ListView
    ->FlatList
    ->SectionList

->View
   View is going to hold child elements , act as container
->ScrollView
   View is going to hold child elements,act as container with scrollbar 

ScrollView:
  It is generic scrolling container that can multiple elements/components.
  ScrollView supports horizontal or Vertical View.

import {Text, ScrollView } from 'react-native'

const App = () => {
    return <ScrollView>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
    </ScrollView>
}
export default App;
...................................................................................
				List View
.....................................................................................

FlatList:
=>FlatList component displays a scrolling list of changing but with structured data.
=>FlatList works well for long list of data,where no of items change over time.
=>FlatList provides good perfomance benefits over ScrollView

   ScrollView displays the data/items at once, if we have more items , it will take    time
   FlatList only renders elements that are currently showing on the screen, not all    elements at once

In React:

{array.map(item=><li>{item.text}</li>}

FlatList:

 <FlatList data={TODOS} renderItem={(obj)=>{
     return <Text >{obj.item.todo.title}</Text>
 }} />

data:
  Data prop is called datasource which is plain array

renderItem:
  Takes an item from data prop and renders it into the list.
 
renderItem({
 item:ItemObject(todo,Customer),
 index:number,
 separators: {
   highlight:()=>{},
   unhighlight:()=>{},
   updateProps:(select:'loading'|'trailing',newProps:any)
  
 }
})

keyExtractor:
  keyExtractor={(item)=>item.id}

....

import { FlatList, Text, View } from 'react-native'
import TODOS from './mockdata/todos'


const Todo = props => {
    return <View>
        <Text>Todo</Text>
        {/* <FlatList
            data={props.todos}
            renderItem={(obj) => {
                console.log(obj)
                return <Text>{obj.item.title}</Text>
            }} /> */}
        {/* <FlatList
            data={props.todos}
            renderItem={({item}) => {
                console.log(item)
                return <Text>{item.title}</Text>
            }} /> */}
        {/* <FlatList
            data={props.todos}
            renderItem={({ item: { title } }) => {
                return <Text>{title}</Text>
            }} /> */}
        <FlatList
            data={props.todos}
            renderItem={({ item: { title } }) => <Text>{title}</Text>}
            keyExtractor={item => item.id}
        />
    </View>
}


const App = () => {
    return <View>
        <Todo todos={TODOS} />
    </View>

}
export default App;
...................................................................................
                          Section List
..................................................................................

It is special list which shows data based on category, showing nested array data

<SectionList sections={list} renderItem=>{} renderSectionHeader={} keyExtractor={} >

Array must have data key to render item.

mock-data/courses.js
const COURSELIST = [
  {
    title: 'User Interface',
    data: [
      'HTML',
      'CSS',
      'javascript',
      'Android',
      'IOS',
      'Flutter',
      'React',
      'Angular',
      'Vue',
    ],
  },
  {
    title: 'Back end',
    data: ['Java', 'C#', 'Microservices', 'Python'],
  },
  {
    title: 'Data Stores',
    data: ['mysql', 'oracle', 'mongo', 'redis'],
  },
];
export default COURSELIST;
.....................................................................................
//Section List 
import { SectionList, Text, View } from 'react-native'
import COURSELIST from './mockdata/course'


const Course = props => {
    console.log(props)
    return <View>
        <SectionList
            sections={props.courselist}
            renderItem={({item}) => {
                console.log(item)
                return <Text>{item}</Text>
            }}
            keyExtractor={(item, index) => {
                return item + index
            }}
            renderSectionHeader={({ section: { title } }) => {
                return <Text>{title}</Text>
            }}
        />
        
       

    </View>
}


const App = () => {
    return <View>
        <Course courselist={COURSELIST} />
    </View>

}
export default App;
....................................................................................
				Styling
...................................................................................
In react styles are added through css, react native does not have css language because no html is used.

React Native does not allow css directly.
We are going to use "javascript style apis"
Javascript has api to add styles via code.

You must have knowledge to identify the css "js" properties.


In html how to apply style via js:

document.getElementById(id).style.property = new style
element.style.propery =value

https://www.w3schools.com/jsref/dom_obj_style.asp

React Native uses a Object to add styles.
 =>StyleSheet

StyleSheet:
 It is  abstraction to css.

import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <Text style={styles.label}>{props.message}</Text>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight:'bold',
        fontFamily: "TGaramond",
        color:'#61dafb',
        borderWidth:4
    }
})


<div style={{backgroundColor:'red'}} />

Syntax:

 const styles = StyleSheet.create({
  styleProperty:PropValue,
  styleProperty: {
      prop1:value1,
      prop2:value2,
      prop3:value3
   
  }
 })

How to declare inline style?

   <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

.....................................................................................
			Height and width
.....................................................................................

How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".
if it is box which is some basic properites called "height and width".

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.
....................................................................................

In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - reponsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.
eg:
import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <>
        <Text style={styles.label}>{props.message}</Text>
        <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

    </>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight: 'bold',
        fontFamily: "TGaramond",
        color: '#61dafb',
        borderWidth: 4,
        width: 220
    }
})
...................................................................................

Percentage Dimensions:
 It is similar to responsive web design
=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.
  
import { View } from 'react-native'

const MyComponent = props => {
    return <View style={{ height: '100%', width: '100%', backgroundColor: 'yellow' }}>
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View >
}


const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 
..................................................................................
				Flex box layout
...................................................................................
React Native supports flex box layout.

Core Concepts of FlexBox:
........................
Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 

How to activate the flex layout?
  Flex layout is activated inside every react element by default

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are automatically.

<View style={{flex:1}}>
  <View

</View>

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>

The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
        </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
				Nested Containers
...................................................................................
import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 3, backgroundColor: 'blue' }} />
        <View style={{ flex: 4, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
..................................................................................
				Flex Direction
...................................................................................
flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.


Column:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;

...

Row:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Row</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................

Column Reverse:

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column-Reverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
Row Reverse:
...........
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:RowReverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
			Aligning Child elements(Flex Items)
....................................................................................

In order to align flex items within container we have properties

1.Justify content
2.Align items
3.Align self
4.Align Content
5.Flex wrap

Justify content:
 Align flex items within the main axis(x axis) of their container.

Flex Direction says that how to organize either row or column


justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'

flex-start; + flex direction: column

  The default value, align childern of a container to the start of the container's main axis.
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
................................................................................
justifyContent: 'flex-start', + flexDirection:'column':
.......................................................

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................


flex-end:
   Align childern of a container to the end of the container's main axis
 
flexDirection:'column'+ justifyContent: 'flex-end',
  
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;


flexDirection:'row'+ justifyContent: 'flex-end',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        // flexDirection:'column',
        flexDirection:'row',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................

center:
......
   Align childern of a container in the center of the container's main axis.

flexDirection:'column',+  justifyContent: 'center',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        // flexDirection:'row',
        justifyContent: 'center',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.............

Justify-Content: space between
.............................
Allocate space between items based on containers x'axis



import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'space-between',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................
justify content: space-around:
.............................

Allocate space around the items based on x axis
//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        justifyContent: 'space-around',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................

space-evenly:
............
Evenly distribute space for children the alignment container along the main axis.

space-evenly= space-between + space-around
..

//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        //justifyContent: 'space-around',
        justifyContent:'space-evenly',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................
				Align items
....................................................................................

Align items going to allocate space based "Y/Cross " axis.

Justify Content always X axis where AlignItems y axis.


AlignItems: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

eg:

Flex-start:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-start',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.............

Flex-end:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-end',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;

...
center
.....
alignItems:'center',
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'center',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.....
base line:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'baseline',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
......................................................................................
stretch:
 
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'stretch',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.....................................................................................
				Align self - child element 
....................................................................................
Align self is similar to Align items and justify content but align self is going to have power child elements can controler their alignments.

Elements can align itself.

alignSelf: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        <View
            style={[
                styles.box,
                {
                    alignSelf:'stretch',
                    width: 'auto',
                    minWidth: 50,
                    backgroundColor: 'red',
                },
            ]}
        />
        <View style={[styles.box, { backgroundColor: 'skyblue',alignSelf:'center' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue',alignSelf:'flex-end' }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'yellow',
        height:50,
    },
    box: {
        width: 50,
        height: 50,
    }
})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
				Flex wrap
...................................................................................


....................................................................................
			Flex wrap
....................................................................................
if more childrens beyond container size, it starts overflow, in order avoid overflow
meaning that you want to lay elements within container... we can use flex wrap.
import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
          
        
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexWrap:'wrap',
        flexDirection: 'column',
        justifyContent: 'flex-start',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
				Gap
....................................................................................

How to allocate space among elements?

 Flex gap
 =>Column gap
 =>Row gap				

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
          
        
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'pink'
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'steelblue',
        flexWrap:'wrap',
        flexDirection: 'column',
        alignContent: 'flex-start',
        marginBottom: 24,
        rowGap:10,
        columnGap:10
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
				Types of layout

1.Absolute 
2.Relative
 
The layout property called "position"

position: 'top' | 'right' | 'bottom' | left

position property controls the element position. generally elements are positioned according natural positioning order like row wise or column

Relative:
 =>This is default layout.
 =>Elements are positioned relatively to the container.

Absolute:
  =>The elements are place not based on the normal layout work flow.
  =>we have to override postion property.


import { StyleSheet, View, Text } from 'react-native'

const MyComponent = () => {
    // Flex container
    return <View style={styles.container}>

        {/* <View style={[styles.box, { backgroundColor: 'powderblue', top: 25, left: 25, position: 'relative' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue', top: 50, left: 50, position: 'relative' }]} />
        <View />
        <View style={[styles.box, { backgroundColor: 'red', top: 75, left: 75, position: 'relative' }]} /> */}
        <View style={[styles.box, { backgroundColor: 'powderblue', top: 25, left: 25, position: 'absolute' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue', top: 50, left: 50, position: 'absolute' }]} />
        <View />
        <View style={[styles.box, { backgroundColor: 'red', top: 75, left: 75, position: 'absolute' }]} />
        <View />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        minWidth: 200,
        marginTop: 10,
        flexDirection: 'row',
        flexWrap: 'wrap'

    },
    box: {
        height: 50,
        width: 50
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
..................................................................................
				Mixing layout properties
....................................................................................

Flex direction : row
Justify content: flex-start
AlignItems:flex-start

https://yogalayout.com/docs
....................................................................................
				 Margins and Padding
....................................................................................
Margins will add space outside element in all directions : top,right,bottom,left
Padding will add space within element in all directions: top,right,bottom,left

marginTop:10
paddingTop:10

Assignment : Design calculator
.....................................................................................
			   Colors 
.....................................................................................

How to use colors?

 -color names; red blue; which is not mostly recommended.
 -color values ; #

Api:
PlatformColor
  It is used to apply platform default colors

Since our application is build platform independent, how to apply plaftform specific colors.
for eg: i want to apply android color schemes when i run app in android device, if the same app is executed on IOS , i need to apply ios spcific colors.

How to detect platform?
 React native offers an api called "Platform"

Platform api properties and methods:

constants
isPad | isTv | isTesting
os
version

methods:
 select

select method how works?
 select internally applies if logic to select os

Platform.OS === 'platform' or a Platform.select()


Eg: Platform Interformation:
//Platform information

import { View, Text, StyleSheet, Platform } from 'react-native'

const App = () => {

     return <View style={styles.container}>
         <Text>Platform Information</Text>
         <Text>OS : {Platform.OS}</Text>
         <Text>OS version: {Platform.Version}</Text>
         <Text>Device Type {Platform.isTV ? "TV" : "Mobile"}</Text>
         <Text>Platform Constants</Text>
         <Text>{JSON.stringify(Platform.constants)}</Text>
     </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'pink',
        fontSize:50,
        justifyContent: 'center',
        alignItems: 'center'
    }
})


export default App;
....................................................................................
			How to apply colors based on Platform
....................................................................................
How to use colors?

 -color names; red blue; which is not mostly recommended.
 -color values ; #

Color apis:

PlatformColor

PlatformColor(color1, [color2, ...colorN]);

 You can use the PlatformColor function to access native colors on the target platform by supplying the native color’s corresponding string value

If you pass more than one string value to the PlatformColor function, it will treat the first value as the default and the rest as fallback.

PlatformColor('bogusName', 'linkColor');

Supported colors
:
For a full list of the types of system colors supported.

Android:
R.attr - ?attr prefix
R.color - @android:color prefix


iOS (Objective-C and Swift notations):

UIColor Standard Colors
UIColor UI Element Colors

select method how works?
 select internally applies if logic to select os

Platform.OS === 'platform' or a Platform.select()



import React from 'react';
import {
    Platform,
    PlatformColor,
    StyleSheet,
    Text,
    View
} from 'react-native';

const App = () => (
    <View style={styles.container}>
        <Text style={styles.label}>
            I am a special label color!
    </Text>
    </View>
);

const styles = StyleSheet.create({
    label: {
        padding: 16,
        ...Platform.select({
            ios: {
                color: PlatformColor('label'),
                backgroundColor:
                    PlatformColor('systemTealColor'),
            },
            android: {
                color: PlatformColor('?android:attr/textColor'),
                backgroundColor:
                    PlatformColor('@android:color/holo_blue_bright'),
            },
            default: { color: 'black' }
        })
    },
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        ...Platform.select({
            ios: {
                color: PlatformColor('label'),
                backgroundColor:
                    PlatformColor('systemTealColor'),
            },
            android: {
                color: PlatformColor('?android:attr/textColor'),
                backgroundColor:
                    PlatformColor('@android:color/holo_orange_dark'),
            },
            default: { color: 'black' }
        })
    }
});

export default App;
....................................................................................
				Style Sheet Composition
...................................................................................

coimbines two styles into one style

StyleeSheet.compose(style1,style2,style3,styleN)

style1 can be overriden by styles2
import { StyleSheet, Text, View } from 'react-native'



const App = props => {
    return <View style={container}>
        <Text style={text}>Hello</Text>
    </View>
}
//page style :Common style 
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: "pink"
    },
    text: {
        fontSize: 30,
        color: '#000'
    }
})
//list styles 


const lists = StyleSheet.create({
    listContainer: {
        flex: 1,
        backgroundColor: '#61dafb'
    },
    listItem: {
        fontStyle: 'italic',
        fontWeight: 'bold'
    }
})

//merge twos 
const container = StyleSheet.compose(page.container, lists.container)
const text = StyleSheet.compose(page.text, lists.listItem)


export default App; 
................................**********..........................................
				Dynamic ui
...................................................................................

State
.....

=>How to interact with Ui
=>How to introduce events and listerners
=>hooks
=>class vs functional compoents.


How to mutate state:
import { StyleSheet, Text, View, Button, Alert } from 'react-native'
import React from 'react';

class App extends React.Component {
    state = {
        like: 0
    }
    //listener 
    onLike = () => {
        //Alert.alert('Like')
        // this.setState((prvState) => {
        //     //return new state : Immutable 
        //     return { ...prvState, like: prvState.like + 1 }
        // })
        this.setState({
            like: this.state.like + 1
        });
    }
    render() {
        return <View style={page.container}>
            <Text style={page.text}>State</Text>
            <Text style={page.text}>{this.state.like}</Text>
            <Button title="Like" onPress={this.onLike} />
        </View>
    }
}

//page style :Common style 
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: "pink"
    },
    text: {
        fontSize: 30,
        color: '#000'
    }
})

export default App; 
....................................................................................
			How to remove class components?

class components almost gone from the react echo system. rather we use functional components.

Functional components has been refactored with feature called "hooks"

class Components drawbacks:
..........................

=>Code Reuse
   if i have written some logic inside class component the same logic i want to resue in another components then we cant reuse.

functional components and Code Reuse:
......................................
  via hooks

What is hook?
 =>hook is just function which carries reusable code, which can be used across application.
=>hooks eleminate lot of boiler plate code.

React provides lot of built in hooks in order to write complex code.

Hooks features:
=>hooks are just js functions, which takes args and parameters, returns values too.
=>hooks starts with "use+FunctionName" which common convention.

import { StyleSheet, Text, View, Button, Alert } from 'react-native'
import { useState } from 'react';

const Like = props => {
    const [like, setLike] = useState(0)
    //Listener
    const onLike = () => {
        setLike(like => {
            return like + 1
        })
    }

    return <View style={page.container}>
        <Text>Hooks</Text>
        <Text>{like}</Text>
        <Button title="Like" onPress={onLike} />
    </View>
}

const App = () => {
    return <Like />
}

//page style :Common style 
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: "pink"
    }
})

export default App; 
....................................................................................

Assignment:

1.Build list of content
 when i click a list item i have show in alert box that item in json format.

2.Write complete calculator logic

Using hooks..



